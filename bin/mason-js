#!/usr/bin/env node
var loader = require('../lib/retrieve_package.js');
var reader = require('../lib/ini_file_reader.js');
var sym = require('../lib/symlink.js');
var log = require('npmlog');
var fse = require('fs-extra');
var fs = require('fs');
var path = require('path');
var args = require('minimist')(process.argv.slice(2));

global.appRoot = process.cwd();
var masonPath = path.join(global.appRoot, '/mason-versions.ini');

var filterFunc = (src, dest) => {
  if (src.indexOf('mason.ini') > -1) {
    return false;
  } else if (fs.lstatSync(src).isFile()){
    fs.symlinkSync(src,dest);
    return false;
  }else{
    return true;
  }
}

function execute(packages, callback){
  loader.install(packages, function(err, packageLists){
    if (err) throw err; 
    log.info('Mason Package Install Starting');

    sym.buildLinkPaths(packageLists, function(err, symLinkPaths){
      if (err) return callback(err); 

      log.info('Creating Symlinks');
      symLinkPaths.forEach(function(p){
        fse.copySync(p[0], p[1], { clobber: true, filter:filterFunc });
      }); 
    });
  });
}

if (require.main === module) {
  var install = args['_'][0]; 
  var singlePackage = args['_'][1]; 
  var type = args.type; 

  if (!install) {
    console.error('missing mason-js args');
    process.stdout.write(fs.readFileSync(__dirname + '/help', 'utf8'));
    process.exit(1);
  }

  if (install === 'install' && !singlePackage){
    console.log('hererere')
    reader.fileReader(masonPath, function(err, packages){
      // console.log('packages!!', packages);
      execute(packages, function(err, result){
        if (err) return callback(err);
        log.info('Finished downloading packages')
      });
    });
  }

  // add more validation here
  if (singlePackage && !args.type) {
    console.error('include package type with package info: example protozero=1.5.1 --type=header');
    process.stdout.write(fs.readFileSync(__dirname + '/help', 'utf8'));
    process.exit(1);
  }
  
  if (install === 'install' && singlePackage && args.type){
    var package = reader.buildParams(singlePackage, type);
    execute(package, function(err, result){
      if (err) return callback(err);
      log.info('Finished downloading package')
    });
  }

}










